var documenterSearchIndex = {"docs":
[{"location":"man/hmatrix/#H-Matrix","page":"H-Matrix","title":"H-Matrix","text":"","category":"section"},{"location":"man/hmatrix/","page":"H-Matrix","title":"H-Matrix","text":"Here the Documentation of H-Matrix is done.","category":"page"},{"location":"functions/#Types","page":"Types and Functions","title":"Types","text":"","category":"section"},{"location":"functions/","page":"Types and Functions","title":"Types and Functions","text":"KMeansTreeOptions\nKMeansTreeNode","category":"page"},{"location":"functions/#FastBEAST.KMeansTreeOptions","page":"Types and Functions","title":"FastBEAST.KMeansTreeOptions","text":"KMeansTreeOptions <: TreeOptions\n\nIs the datatype that describes which tree the create_tree function creates.\n\nFields\n\niterations: number of iterations on each level, default is one iterations\nnchildren: defines the number of children of each node, default is two\nnmin: defines the minimum amount of datapoints which are needed in a    cluster so that it gets split up in subclusters, default is 1\nmaxlevel: defines the maximum amount of levels, default is 100.\nalgorithm: defines which algorithm is used. The :naive approach is not recommended.   Default is the wrapped ParallelKMeans algorithm.\n\n\n\n\n\n","category":"type"},{"location":"functions/#FastBEAST.KMeansTreeNode","page":"Types and Functions","title":"FastBEAST.KMeansTreeNode","text":"KMeansTreeNode{T} <: AbstractNode\n\nIs the datatype of each node in the K-Means Clustering Tree.\n\nFields\n\nparent::Union{KMeansTreeNode{T},Nothing}: is the superordinate cluster of   of the represented cluster\nchildren::Union{Vector{KMeansTreeNode{T}}, Nothing}: all directly    subordinated clusters of the represented cluster\nlevel::Integer: the level of the represented cluster\ncenter: the center by which the cluster is defined\nradius: the euclidian distance between the center and the farthest away   point\ndata::T: array containig the indices of the points in this cluster\n\n\n\n\n\n","category":"type"},{"location":"functions/#Functions","page":"Types and Functions","title":"Functions","text":"","category":"section"},{"location":"functions/","page":"Types and Functions","title":"Types and Functions","text":"FastBEAST.create_tree\nFastBEAST.iscompressable","category":"page"},{"location":"functions/#FastBEAST.create_tree","page":"Types and Functions","title":"FastBEAST.create_tree","text":"create_tree(points::Array{SVector{D, T}, 1}; treeoptions)\n\nCreates an algebraic tree for an givn set of datapoints. The returned  datastructure is the foundation for the algorithms in this package. \n\nArguments\n\npoints::Array{SVector{D, T}, 1}: is an array of    SVector.    Each    SVector   contains in general two or three float values, which discribe the position    in the space.\n\nKeywords\n\ntreeoptions::TreeOptions: this keyword defines by which tree is build.    TreeOptions is an abstract type which either can be BoxTreeOptions or   KMeansTreeOptions. Default type is BoxTreeOptions.\n\nReturns\n\nAbstractNode: the root of the created tree. AbstractNode is an abstract type    which either can be BoxTreeNode or KMeansTreeNode, depending on the keyword.\n\n\n\n\n\n","category":"function"},{"location":"functions/#FastBEAST.iscompressable","page":"Types and Functions","title":"FastBEAST.iscompressable","text":"iscompressable(sourcenode::AbstractNode, testnode::AbstractNode)\n\nDetermins whether two nodes of a tree are comressable. The criteria differs  between the Box Tree and the K-Means Clustering Tree. For the K-Means Clustering Tree two nodes can be compressed, if the distance  between the centers of two clusters is greater than the sum of their radius  multiplied by a factor of 1.5. For the Box Tree two nodes can be compressed, if the distance between the centers  of the two boxes is greater than the sum of the distances of each box's center to  one of its corners multiplied by a factor of 1.1.\n\nArguments\n\nsourcenode::AbstractNode: the node which is observed\ntestnode::AbstractNode: the node which is tested for compression\n\nReturns\n\ntrue: if the input nodes are compressable\nfalse: if the input nodes are not compressable\n\n\n\n\n\n","category":"function"},{"location":"gstarted/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"gstarted/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"man/clustering/#Clustering-Strategies","page":"Clustering Strategies","title":"Clustering Strategies","text":"","category":"section"},{"location":"man/clustering/","page":"Clustering Strategies","title":"Clustering Strategies","text":"For the algorithms defined in this package the given set of datapoints have to be sorted in an algebraic tree.  Therefor the following strategies can be used. ","category":"page"},{"location":"man/clustering/#Box-Tree","page":"Clustering Strategies","title":"Box Tree","text":"","category":"section"},{"location":"man/clustering/#K-Means-Clustering-Tree","page":"Clustering Strategies","title":"K-Means Clustering Tree","text":"","category":"section"},{"location":"man/clustering/#Definition","page":"Clustering Strategies","title":"Definition","text":"","category":"section"},{"location":"man/clustering/","page":"Clustering Strategies","title":"Clustering Strategies","text":"The K-Means algorithm is a clustering strategy for n-dimensional spaces, in which each cluster is represented by its center. In this case the algorithm is implemented for a two or three dimensional euclidean space.","category":"page"},{"location":"man/clustering/#Idea","page":"Clustering Strategies","title":"Idea","text":"","category":"section"},{"location":"man/clustering/","page":"Clustering Strategies","title":"Clustering Strategies","text":"The goal of the algorithm is to divide the dataset in k clusters, which are then alternately divided in k clusters.  The procedure is as follows: At first there are k points chosen from the dataset as centers. Then each point is sorted to its closest center. For each resulting cluster the center is recalculated by its points and all points are resorted to the new centers. This step is repeated for a given number of iterations. The whole process is alternately repeated for each cluster.  ","category":"page"},{"location":"man/clustering/#Algorithm","page":"Clustering Strategies","title":"Algorithm","text":"","category":"section"},{"location":"man/clustering/","page":"Clustering Strategies","title":"Clustering Strategies","text":"Given is a random distribution of datapoints in 2D, which should be sorted in a binary tree.  Two points out of the dataset are chosen as the first centers. For each of the points the euclidean distance to both centers is calculated by:","category":"page"},{"location":"man/clustering/","page":"Clustering Strategies","title":"Clustering Strategies","text":"    dist = norm(x - c_i)quad forenspace i = 12k","category":"page"},{"location":"man/clustering/","page":"Clustering Strategies","title":"Clustering Strategies","text":"With x the location of the datapoint and c_i the centers. The point is then added to the closer center.","category":"page"},{"location":"man/clustering/","page":"Clustering Strategies","title":"Clustering Strategies","text":"(Image: ) (Image: )","category":"page"},{"location":"man/clustering/","page":"Clustering Strategies","title":"Clustering Strategies","text":"The centers are shown in the first picture in orange and each cluster is represented in the second picture by one color. To achieve a more even distribution between both clusters, the centers are recalculated. Therefor the distance between the center and each point of the cluster has to be minimized. This can be done by taking the mean over all points.","category":"page"},{"location":"man/clustering/","page":"Clustering Strategies","title":"Clustering Strategies","text":"    c_i = N_k^-1 * sum_n=1^N_k x_n","category":"page"},{"location":"man/clustering/","page":"Clustering Strategies","title":"Clustering Strategies","text":"The dataset is resorted to the updated centers, resulting in the following distribution.","category":"page"},{"location":"man/clustering/","page":"Clustering Strategies","title":"Clustering Strategies","text":"(Image: )","category":"page"},{"location":"man/clustering/","page":"Clustering Strategies","title":"Clustering Strategies","text":"As it can be seen the updated clusters can result in a more even distribution. These steps can then be repeated for a given amount of iterations.  The final clusters are afterwards taken as new distributions of datapoints and the algorithm can alternately be repeated until clusters with a minimum amount of points or a given number of level is reached. ","category":"page"},{"location":"man/clustering/#Comments","page":"Clustering Strategies","title":"Comments","text":"","category":"section"},{"location":"man/clustering/","page":"Clustering Strategies","title":"Clustering Strategies","text":"As it can be seen in the example more iterations will in general lead to more equal clusters. By default the wrapped ParallelKMeans.jl algorithm is used, which stops iterating when the new center of a cluster is close enough to the last iteration. This prevents unnecessary iterations and thus reduces the required computing time. For non homogenous distributions equal sized clusters can not always be reached, but more iterations will generate in general a better tree structure for the algorithms in this package. For the the algorithms in this package 100 iterations and two children for each level are recommended.","category":"page"},{"location":"man/aca/#Adaptive-Cross-Aproximation","page":"Adaptive Cross Aproximation","title":"Adaptive Cross Aproximation","text":"","category":"section"},{"location":"#FastBEAST.jl","page":"Home","title":"FastBEAST.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Some ideas for implementing an ACA in Julia targeting BEAST.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Fast linear Algebra","category":"page"},{"location":"#Example","page":"Home","title":"Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Example of the main feature of the peckage.","category":"page"}]
}
